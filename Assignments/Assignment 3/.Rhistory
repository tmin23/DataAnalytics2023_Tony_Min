num_vec = c(1, 2, 3, 5, 99)
class(num_vec)
num_vec = c(1, 3, 5,99)
class(num_vec)
install.pakages("MASSS")
library(MASS)
install.packages("MASSS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
attach(Boston)
?Boston
head(Boston)
head(Boston)
dim(Boston)
names(Boston)
str(Boston)
nrow(Boston)
ncol(Boston)
summary(Boston)
statistics
summary(Boston$crim)
library(gdata)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
data("Titanic")
Titanic
titanic.df <- as.data.frame(Titanic)
# Tree usign rpart
rpart_tree <- rpart(Survived ~., data = titanic.df)
library(rpart)
# Tree usign rpart
rpart_tree <- rpart(Survived ~., data = titanic.df)
rpart_tree
# Ctree
ctree <- ctree(Survied ~., data = titanic.df)
library(party)
library(stats)
library(party)
library(stats)
library(partykit)
library("partykit")
install.packages("partykit")
require(party)
plot(rpart_tree)
fancyRpartPlot(rpart_tree, caption = NULL)
install.packages("rattle")
library(rattle)
fancyRpartPlot(rpart_tree, caption = NULL)
# Ctree
ctree <- ctree(Survied ~., data = titanic.df)
install.packages("party")
require(party)
# Tree usign rpart
rpart_tree <- rpart(Survived ~., data = titanic.df)
fancyRpartPlot(rpart_tree, caption = NULL)
# Ctree
ctree <- ctree(Survied ~., data = titanic.df)
plot(ctree)
# Ctree
ctree <- ctree(Survived ~., data = titanic.df)
plot(ctree)
plot(rpart_tree)
plot(rpart_tree, uniform = TRUE, main = "Classification Tree for Survial")
# Tree usign rpart
rpart_tree <- rpart(Survived ~., data = titanic.df)
plot(rpart_tree, uniform = TRUE, main = "Classification Tree for Survial")
text(rpart_tree, use.n = TRUE, all = TRUE, cex = .8)
text(rpart_tree, use.n = TRUE, all = TRUE, cex = 1)
# Tree usign rpart
rpart_tree <- rpart(Survived ~., data = titanic.df)
plot(rpart_tree, uniform = TRUE, main = "Classification Tree for Survial")
text(rpart_tree, use.n = TRUE, all = TRUE, cex = 1)
text(rpart_tree, use.n = TRUE, all = TRUE, cex = .1)
# Tree usign rpart
rpart_tree <- rpart(Survived ~., data = titanic.df)
plot(rpart_tree, uniform = TRUE, main = "Classification Tree for Survial")
text(rpart_tree, use.n = TRUE, all = TRUE, cex = .1)
plot(rpart_tree, uniform = TRUE, main = "Classification Tree for Survial")
text(rpart_tree, use.n = TRUE, all = TRUE, cex = .5)
plot(rpart_tree, uniform = TRUE)
text(rpart_tree, use.n = TRUE, all = TRUE, cex = .5)
plot(rpart_tree)
text(rpart_tree, use.n = TRUE, all = TRUE, cex = .5)
text(rpart_tree, use.n = TRUE, all = TRUE, cex = .75)
plot(rpart_tree, uniform = TRUE, main = "Classification Tree for Survial")
text(rpart_tree, use.n = TRUE, all = TRUE, cex = .75)
# hclust
hcluster <- hclust(dist(t(titanic.df)))
plot(rpart_tree, uniform = TRUE, main = "Classification Tree for Survival")
text(rpart_tree, use.n = TRUE, all = TRUE, cex = .75)
plot(ctree)
# hclust
titan.df <- na.omit(titanic.df)
hcluster <- hclust(dist(t(titan.df)))
# hclust
titan.df <- na.omit(titanic.df)
hcluster <- hclust(dist(t(titan.df)))
# hclust
titan.df <- unclass(titanic.df)
hcluster <- hclust(dist(t(titan.df)))
# hclust
#titan.df <- unclass(titanic.df)
hcluster <- hclust(dist(t(titanic.df)))
titanic.df$Survived
# hclust
#titan.df <- unclass(titanic.df)
hcluster <- hclust(dist(titanic.df$Survived))
# hclust
#titan.df <- unclass(titanic.df)
hcluster <- hclust(dist(t(titanic.df$Survived)))
# hclust
#titan.df <- unclass(titanic.df)
hcluster <- hclust(dist(t(titanic.df)))
titanic.df
length(titanic.df)
plot(ctree, main="Conditional Inference Tree for Survived")
# hclust
h_tree <- hclust(dist(titanic.df))
titanic.df$Survived
# hclust
h_tree <- hclust(dist(titanic.df))
dist(titanic.df)
plot(h_tree)
mtcars
head(mtcars)
str(mtcars)
model1 <- lm(mph ~ cyl + wt, data = mtcars)
model1 <- lm(mpg ~ cyl + wt, data = mtcars)
model1
plot(model1, pch = 18, col = 'red', which = c(4))
# cooks distance function to identify cooks distance to each observation
cooks.distance(model1)
CooksDistance <- cooks.distance(model1)
round(CooksDistance, 5)
sort(round(CooksDistance, 5))
help("rnorm")
set.seed(10)
data1 <- rnorm(50)
data1
# Shapiro-Wilk Normality Test
shapiro.test(data10)
# Shapiro-Wilk Normality Test
shapiro.test(data1)
hist(data1, col = 'green')
# > 0.05 accept null hypothesis follows normal distribution
shapiro.test(nyt$Age[nyt7$Age > 0,])
# Boxplots
# Load Data
nyt7 = read.csv("Data/nyt7.csv")
nyt13 = read.csv("Data/nyt13.csv")
nyt14 = read.csv("Data/nyt14.csv")
nyt15 = read.csv("Data/nyt15.csv")
nyt17 = read.csv("Data/nyt17.csv")
nyt23 = read.csv("Data/nyt23.csv")
setwd("C:/Users/ghpan/Documents/DataAnalytics2023_Tony_Min/Assignments/Assignment 3")
# Boxplots
# Load Data
nyt7 = read.csv("Data/nyt7.csv")
nyt13 = read.csv("Data/nyt13.csv")
nyt14 = read.csv("Data/nyt14.csv")
nyt15 = read.csv("Data/nyt15.csv")
nyt17 = read.csv("Data/nyt17.csv")
nyt23 = read.csv("Data/nyt23.csv")
nyt29 = read.csv("Data/nyt29.csv")
# > 0.05 accept null hypothesis follows normal distribution
shapiro.test(nyt$Age[nyt7$Age > 0,])
# > 0.05 accept null hypothesis follows normal distribution
shapiro.test(nyt7$Age[nyt7$Age > 0,])
# > 0.05 accept null hypothesis follows normal distribution
shapiro.test(nyt7$Age[nyt7$Age > 0,])
shapiro.test(data2)
data1
set.seed(30)
data2 <- rnow(50)
data2 <- rnorm(50)
# Shapiro-Wilk Normality Test
shapiro.test(data1)
hist(data1, col = 'green')
shapiro.test(data2)
hist(data2, col = 'steelblue')
# Poisson Distribution
set.seed(0)
data <- rpois(n = 100, lambda = 3)
shapiro.test(data)
hist(data, col = 'yellow')
# > 0.05 accept null hypothesis follows normal distribution
shapiro.test(nyt7$Age)
# > 0.05 accept null hypothesis follows normal distribution
shapiro.test(nyt7$Age[nyt7$Age > 0])
# > 0.05 accept null hypothesis follows normal distribution
shapiro.test(nyt7$Age[nyt7$Age > 0,])
nyt7$Age[nyt7$Age > 0,]
# > 0.05 accept null hypothesis follows normal distribution
shapiro.test(nyt7[nyt7$Age > 0,])
nyt7[nyt7$Age >0,]
# Aderson-Darling test
library(nortest)
x <- rnorm(100, 0, 1)
set.seed(1)
x <- rnorm(100, 0, 1)
ad.test(x)
# Filter data sets
nyt7 <- nyt7[nyt7$Age > 0 & nyt7$Impressions > 0, ]
nyt13 <- nyt13[nyt13$Age > 0 & nyt13$Impressions > 0, ]
nyt14 <- nyt14[nyt14$Age > 0 & nyt14$Impressions > 0, ]
nyt15 <- nyt15[nyt15$Age > 0 & nyt15$Impressions > 0, ]
# Normality Test
ad.test(nyt7$Age)$p.value
ad.test(nyt7$Impressions)$p.value
ad.test(nyt13$Age)$p.value
ad.test(nyt13$Impressions)$p.value
ad.test(nyt14$Age)$p.value
ad.test(nyt14$Impressions)$p.value
ad.test(nyt15$Age)$p.value
ad.test(nyt15$Impressions)$p.value
# Creating Histograms for Age
par(mfrow = c(2, 2))
hist(nyt7$Age, main = "Dataset 7", xlab = "Age", col = 'blue')
hist(nyt13$Age, main = "Dataset 13", xlab = "Age", col = 'red')
hist(nyt14$Age, main = "Dataset 14", xlab = "Age", col = 'green')
hist(nyt15$Age, main = 'Dataset 15', xlab = "Age", col = 'yellow')
# Creating Histograms for Impressions
hist(nyt7$Impressions, main = "Dataset 7", xlab = "Impressions", col = 'blue')
hist(nyt13$Impressions, main = "Dataset 13", xlab = "Impressions", col = 'red')
hist(nyt14$Impressions, main = "Dataset 14", xlab = "Impressions", col = 'green')
hist(nyt15$Impressions, main = 'Dataset 15', xlab = "Impressions", col = 'yellow')
# Plot ECDFs for Age
nyt7_ecdf <- ecdf(nyt7$Age)
plot(nyt7_ecdf, main = "ECDF for Age (Dataset 7)", xlab = "Age", ylab = "ECDF")
abline(h = 0.5, col = "red", lty = 2)
nyt13_ecdf <- ecdf(nyt13$Age)
plot(nyt13_ecdf, main = "ECDF for Age (Dataset 13)", xlab = "Age", ylab = "ECDF")
abline(h = 0.5, col = "red", lty = 2)
nyt14_ecdf <- ecdf(nyt14$Age)
plot(nyt14_ecdf, main = "ECDF for Age (Dataset 14)", xlab = "Age", ylab = "ECDF")
abline(h = 0.5, col = "red", lty = 2)
nyt15_ecdf <- ecdf(nyt15$Age)
plot(nyt15_ecdf, main = "ECDF for Age (Dataset 15)", xlab = "Age", ylab = "ECDF")
abline(h = 0.5, col = "red", lty = 2)
# Plot ECDFs for Impressions
nyt7_ecdf <- ecdf(nyt7$Impressions)
plot(nyt7_ecdf, main = "ECDF for Impressions (Dataset 7)", xlab = "Impressions", ylab = "ECDF")
abline(h = 0.5, col = "purple", lty = 2)
nyt13_ecdf <- ecdf(nyt13$Impressions)
plot(nyt13_ecdf, main = "ECDF for Impressions (Dataset 13)", xlab = "Impressions", ylab = "ECDF")
abline(h = 0.5, col = "purple", lty = 2)
nyt14_ecdf <- ecdf(nyt14$Impressions)
plot(nyt14_ecdf, main = "ECDF for Impressions (Dataset 14)", xlab = "Impressions", ylab = "ECDF")
abline(h = 0.5, col = "purple", lty = 2)
nyt15_ecdf <- ecdf(nyt15$Impressions)
plot(nyt15_ecdf, main = "ECDF for Impressions (Dataset 15)", xlab = "Impressions", ylab = "ECDF")
abline(h = 0.5, col = "purple", lty = 2)
# Plot QQ distribution for Age Normal Distribution
nyt7_qq <- qnorm(ppoints(nyt7$Age))
qqplot(nyt7_qq, nyt7$Age, main = "QQ for Age (Dataset 7)", xlab = "Theoretical Quantiles", ylab = "QQ")
nyt13_qq <- qnorm(ppoints(nyt13$Age))
qqplot(nyt13_qq, nyt13$Age, main = "QQ for Age (Dataset 13)", xlab = "Theoretical Quantiles", ylab = "QQ")
nyt14_qq <- qnorm(ppoints(nyt14$Age))
qqplot(nyt14_qq, nyt14$Age, main = "QQ for Age (Dataset 14)", xlab = "Theoretical Quantiles", ylab = "QQ")
nyt15_qq <- qnorm(ppoints(nyt15$Age))
qqplot(nyt15_qq, nyt15$Age, main = "QQ for Age (Dataset 15)", xlab = "Theoretical Quantiles", ylab = "QQ")
# Plot QQ Distribution for Impressions * Normal Distribution
nyt7_qq <- qnorm(ppoints(nyt7$Impressions))
qqplot(nyt7_qq, nyt7$Impressions, main = "QQ for Impressions (Dataset 7)", xlab = "Theoretical Quantiles", ylab = "QQ")
nyt13_qq <- qnorm(ppoints(nyt13$Impressions))
qqplot(nyt13_qq, nyt13$Impressions, main = "QQ for Impressions (Dataset 13)", xlab = "Theoretical Quantiles", ylab = "QQ")
nyt14_qq <- qnorm(ppoints(nyt14$Impressions))
qqplot(nyt14_qq, nyt14$Impressions, main = "QQ for Impressions (Dataset 14)", xlab = "Theoretical Quantiles", ylab = "QQ")
nyt15_qq <- qnorm(ppoints(nyt15$Impressions))
qqplot(nyt15_qq, nyt15$Impressions, main = "QQ for Impressions (Dataset 15)", xlab = "Theoretical Quantiles", ylab = "QQ")
# Linear Regression
linear_model <- lm(nyt7$Age ~ nyt7$Impressions)
linear_model
linear_model2 <- lm(nyt13$Age ~ nyt13$Impressions)
linear_model2
linear_model3 <- lm(nyt14$Age ~ nyt14$Impressions)
linear_model3
linear_model4 <- lm(nyt15$Age ~ nyt15$Impressions)
linear_model4
abline(lin_model, col="blue", lwd=2)
plot(nyt7$Age ~ nyt7$Impressions, xlab="Impressions", ylab="Age", main="Age vs. Impressions")
abline(linear_model1, col="blue", lwd=2)
# Linear Regression
linear_model1 <- lm(nyt7$Age ~ nyt7$Impressions)
linear_model1
abline(linear_model1, col="blue", lwd=2)
# Linear Regression
linear_model1 <- lm(nyt7$Age ~ nyt7$Impressions)
linear_model1
linear_model2 <- lm(nyt13$Age ~ nyt13$Impressions)
linear_model2
linear_model3 <- lm(nyt14$Age ~ nyt14$Impressions)
linear_model3
linear_model4 <- lm(nyt15$Age ~ nyt15$Impressions)
linear_model4
plot(nyt7$Age ~ nyt7$Impressions, xlab="Impressions", ylab="Age", main="Age vs. Impressions (Dataset 7)")
abline(linear_model1, col="blue", lwd=2)
plot(nyt13$Age ~ nyt13$Impressions, xlab="Impressions", ylab="Age", main="Age vs. Impressions (Dataset 13)")
abline(linear_model2, col = 'red', wd = 2)
plot(nyt14$Age ~ nyt14$Impressions, xlab="Impressions", ylab="Age", main="Age vs. Impressions (Dataset 14)")
abline(linear_model3, col = 'green', wd = 2)
plot(nyt15$Age ~ nyt15$Impressions, xlab="Impressions", ylab="Age", main="Age vs. Impressions (Dataset 15)")
abline(linear_model4, col = 'purple', wd = 2)
# Plot QQ distribution for Age * Normal Distribution
nyt7_qq <- qnorm(ppoints(nyt7$Age))
nyt7_qq
summary(nyt7_qq)
# Linear Regression
linear_model1 <- lm(nyt7$Age ~ nyt7$Impressions)
linear_model1
linear_model2 <- lm(nyt13$Age ~ nyt13$Impressions)
linear_model2
linear_model3 <- lm(nyt14$Age ~ nyt14$Impressions)
linear_model3
linear_model4 <- lm(nyt15$Age ~ nyt15$Impressions)
linear_model4
