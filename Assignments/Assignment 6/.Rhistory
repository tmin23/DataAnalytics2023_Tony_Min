num_vec = c(1, 2, 3, 5, 99)
class(num_vec)
num_vec = c(1, 3, 5,99)
class(num_vec)
install.pakages("MASSS")
library(MASS)
install.packages("MASSS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
attach(Boston)
?Boston
head(Boston)
head(Boston)
dim(Boston)
names(Boston)
str(Boston)
nrow(Boston)
ncol(Boston)
summary(Boston)
statistics
summary(Boston$crim)
setwd("C:/Users/ghpan/Documents/DataAnalytics2023_Tony_Min/Assignments/Assignment 6")
vaccine.df <- data.frame("COVID-19_Vaccination_by_Town_and_Race_Ethnicity_-_ARCHIVED.csv")
vaccine.df
vaccine.df <- read.csv("COVID-19_Vaccination_by_Town_and_Race_Ethnicity_-_ARCHIVED.csv")
vaccine.df
colnames(vaccine.df) <- c("TownName", "VaccinationStatus", "Race", "Type", "Value", "Date")
summary(vaccine.df)
total.df <- vaccine.df[vaccine.df$Race == "Total",]
total.df
summary(total.df)
length(total.df)
total.df <- vaccine.df[vaccine.df$Race == "Total" & vaccine.df$Type == 'Percentage',]
summary(total.df)
length(total.df)
nrow(total.df)
total.df <- vaccine.df[vaccine.df$Race == "Total" &
vaccine.df$Type == 'Percentage' &
vaccine.df$Date == '6/16/2021', ]
summary(total.df)
nrow(total.df)
total.df <- vaccine.df[vaccine.df$Race == "Total" &
vaccine.df$Type == 'Count' &
vaccine.df$Date == '6/16/2021', ]
summary(total.df)
nrow(total.df)
unique(vaccine.df)
unique(vaccine.df$TownName)
length(unique(vaccine.df$TownName))
length(unique(vaccine.df$VaccinationStatus))
unique(vaccine.df$VaccinationStatus)
unique(vaccine.df$Race)
unique(vaccine.df$Type)
length(unique(vaccine.df$Value))
unique(vaccine.df$Date)
length(unique(vaccine.df$Date))
unique(vaccine.df$VaccinationStatus)
unique(vaccine.df$Race)
total.df <- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race = "Total" &
total.df <- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "02/01/2023",]
summary(total.df)
total.df
unique(total.df$Value)
unique(total.df$Type)
total.df <- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "02/01/2023" &
vaccine,df$Type == "Percentage",]
total.df <- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "02/01/2023" &
vaccine.df$Type == "Percentage",]
unique(total.df$Type)
total.df
unique(vaccine.df$Date)
# We will always use the most updated data which is "02/08/2023"
# Race_Status
total_ful_vac_percent_<- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "02/08/2023" &
vaccine.df$Type == "Percentage",]
# We will always use the most updated data which is "02/08/2023" and finding the percentages
# Race_Status
total_ful_vac_<- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "02/08/2023" &
vaccine.df$Type == "Percentage",]
summary(total.df)
total.df
unique(total.df$Type)
View(total.df)
l_vac_<- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "02/08/2023" &
vaccine.df$Type == "Percentage",]
summary(total_ful_vac_)
total_fu
# We will always use the most updated data which is "02/08/2023" and finding the percentages
# Race_Status
total_ful_vac_<- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "02/08/2023" &
vaccine.df$Type == "Percentage",]
# We will always use the most updated data which is "02/08/2023" and finding the percentages
# Race_Status
total_fulvac<- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "02/08/2023" &
vaccine.df$Type == "Percentage",]
summary(total_fulvac)
total_fulvac <- subset(total_fulvac, select = -c(Race))
summary(total_fulvac)
total_fulvac <- subset(total_fulvac, select = -c(Race, VaccinationStatus, Date, ))
total_fulvac <- subset(total_fulvac, select = -c(Race, VaccinationStatus, Date))
# We will always use the most updated data which is "02/08/2023" and finding the percentages
# Race_Status
total_fulvac<- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "02/08/2023" &
vaccine.df$Type == "Percentage",]
summary(total_fulvac)
total_fulvac <- subset(total_fulvac, select = -c(Race, VaccinationStatus, Date, Type))
summary(total_fulvac)
total_fulvac
attendance <- read.csv("School_Attendance_by_Student_Group_and_District__2021-2022.csv")
summary(attendance)
colnames(attendance) <- c("Code", "DistrictName", "Category", "StudentGroup",
"21-22count", "21-22rate", "20-21count", "20-21rate",
"19-20count", "19-20rate", "ReportPeriod", "Date")
summary(attendance)
unique(attendance$Code)
length(unique(attendance$Code))
unique(attendance$DistrictName)
unique(attendance$Category)
unique(attendance$StudentGroup)
unique(attendance$DistrictName)
require(rpart)
Swiss_rpart <- rpart(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_rpart) # try some different plot options
text(swiss_rpart) # try some different text options
Swiss_rpart <- rpart(Fertility ~ Agriculture + Education + Catholic, data = swiss)
swiss_rpart <- rpart(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_rpart) # try some different plot options
text(swiss_rpart) # try some different text options
require(rpart)
swiss_rpart <- rpart(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_rpart) # try some different plot options
text(swiss_rpart) # try some different text options
# Regression Tree Example
require(rpart)
# build the  tree
fitM <- rpart(Mileage~Price + Country + Reliability + Type, method="anova", data=cu.summary)
printcp(fitM) # display the results
plotcp(fitM)
summary(fitM)
par(mfrow=c(1,2))
rsq.rpart(fitM) # visualize cross-validation results
# plot tree
plot(fitM, uniform=TRUE, main="Regression Tree for Mileage ")
text(fitM, use.n=TRUE, all=TRUE, cex=.8)
# prune the tree
pfitM<- prune(fitM, cp=0.01160389) # from cptable??? adjust this to see the effect
# plot the pruned tree
plot(pfitM, uniform=TRUE, main="Pruned Regression Tree for Mileage")
text(pfitM, use.n=TRUE, all=TRUE, cex=.8)
post(pfitM, file = ”ptree2.ps", title = "Pruned Regression Tree for Mileage”)
post(pfitM, file = "ptree2.ps", title = "Pruned Regression Tree for Mileage”)
library(e1071)
library(rpart)
library(e1071)
library(rpart)
library(e1071)
library(rpart)
data(Glass, package="mlbench")
index <-1:nrow(Glass)
testindex <- sample(index, trunc(length(index)/3))
testset <- Glass[testindex,]
trainset <- Glass[-testindex,]
data(Glass, package="mlbench")
library(rpart)
install.packages("mlbench")
library(mlbench)
data(Glass, package="mlbench")
index <-1:nrow(Glass)
testindex <- sample(index, trunc(length(index)/3))
testset <- Glass[testindex,]
trainset <- Glass[-testindex,]
rpart.model <- rpart(Type ~ ., data = trainset)
rpart.pred <- predict(rpart.model, testset[,-10], type = "class")
printcp(rpart.model)
plotcp(rpart.model)
rsq.rpart(rpart.model)
print(rpart.model)
plot(rpart.model,compress=TRUE)
text(rpart.model, use.n=TRUE)
plot(rpart.pred)
