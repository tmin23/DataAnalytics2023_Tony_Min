num_vec = c(1, 2, 3, 5, 99)
class(num_vec)
num_vec = c(1, 3, 5,99)
class(num_vec)
install.pakages("MASSS")
library(MASS)
install.packages("MASSS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
attach(Boston)
?Boston
head(Boston)
head(Boston)
dim(Boston)
names(Boston)
str(Boston)
nrow(Boston)
ncol(Boston)
summary(Boston)
statistics
summary(Boston$crim)
library(ISLR)
library(MASS)
library(boot)
set.seed(1)
install.packages(ISLR)
install.packages("ISLR")
library(ISLR)
library(MASS)
library(boot)
set.seed(1)
??cv.glm
help("sample")
train = sample(392, 196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
attach(Auto)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
lm.fit2 <- lm(mpg~poly(horsepower, 2), data = Auto, subset = train)
mean((mpg-predict(lm.fit2, Auto))[-train]^2)
mean((mpg-predict(lm.fit3, Auto))[-train]^2)
# Cubic Regression Line
lm.fit3 <- lm(mpg~poly(horsepower, 3), data = Auto, subset = train)
mean((mpg-predict(lm.fit3, Auto))[-train]^2)
library(ISLR)
library(MASS)
library(boot)
set.seed(1)
train = sample(392, 196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
attach(Auto)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
# Quadratic Regression Line
lm.fit2 <- lm(mpg~poly(horsepower, 2), data = Auto, subset = train)
mean((mpg-predict(lm.fit2, Auto))[-train]^2)
# Cubic Regression Line
lm.fit3 <- lm(mpg~poly(horsepower, 3), data = Auto, subset = train)
mean((mpg-predict(lm.fit3, Auto))[-train]^2)
set.seed(2)
set.seed(2)
train = sample(392,196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train) # Quadratic
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
set.seed(2)
train = sample(392,196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train) # Quadratic
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train) # Cubic
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
set.seed(17)
cv.error.10 = rep(0,10)
for(i in 1:10){
glm.fit = glm(mpg ~ poly(horsepower, i), data = Auto)
cv.error.10[i] = cv.glm(Auto,glm.fit, K=10) $delta[1]
}
cv.error.10
library(ISLR)
library(MASS)
library(boot)
set.seed(17)
help('rep')
cv.error.10 = rep(0,10)
for(i in 1:10){
glm.fit = glm(mpg ~ poly(horsepower, i), data = Auto)
cv.error.10[i] = cv.glm(Auto,glm.fit, K=10) $delta[1]
}
cv.error.10
data(economics, package = 'ggplot2')
setwd("C:/Users/ghpan/Documents/DataAnalytics2023_Tony_Min/Labs/Lab 11")
economics$index <- 1:nrow(economics)
data(economics, package = 'ggplot2')
economics$index <- 1:nrow(economics) # create index variable
economics <- economics[1:80, ] # retail 80rows for better graphical understanding
loessMod10 <- loess(uempmed ~ index, data=economics, span=0.10) # 10% smoothing span
loessMod25 <- loess(uempmed ~ index, data=economics, span=0.25) # 25% smoothing span
loessMod50 <- loess(uempmed ~ index, data=economics, span=0.50) # 50% smoothing span
smoothed10 <- predict(loessMod10)
smoothed25 <- predict(loessMod25)
smoothed50 <- predict(loessMod50)
plot(economics$uempmed, x = economics$date, type = 'i', main = 'Loess Smoothing and Prediction',
xlab = 'Date', ylab = 'Unemployment (Median)')
plot(economics$uempmed, x = economics$date, type = 'l', main = 'Loess Smoothing and Prediction',
xlab = 'Date', ylab = 'Unemployment (Median)')
lines(smoothed10, x = economics$date, col = 'red')
lines(smoothed25, x = economics$date, col = 'green')
lines(smoothed50, x = economics$date, col = 'blue')
data("cars")
str(cars)
plot(speed ~ dist, data = cars)
help("lowess")
plot(speed ~ dist, data = cars)
lowess(cars$speed ~ cars$dist)
lowess(cars$speed ~ cars$dist)
lines(lowness(cars$speed ~ cars$dist, f = 2/3), col = 'blue')
lines(lowess(cars$speed ~ cars$dist, f = 2/3), col = 'blue')
lines(lowess(cars$speed ~ cars$dist, f=0.8), col="red") # f = 0.8
lines(lowess(cars$speed ~ cars$dist, f=0.9), col="green") # f = 0.9
lines(lowess(cars$speed ~ cars$dist, f=0.1), col= 5) # f = 0.1
lines(lowess(cars$speed ~ cars$dist, f=0.01), col= 6) # f = 0.01
set.seed(123)
x <- seq(0, 2 * pi, length.out = 100)
y <- sin(x) + rnorm(100, sd = 0.2)
train_index <- sample(1:100, 70)
train_x <- x[train_index]
train_y <- y[train_index]
test_x <- x[-train_index]
test_y <- y[-train_index]
# SVM
library(e1071)
svr_model <- svm(train_y ~ train_x, kernel = 'radial', epsilon = 0.1, cost = 1)
predictions <- predict(svr_model, data.frame(train_x = test_x))
# plot the actual and predicted values:
plot(test_x, test_y, main = "SVR Example")
lines(test_x, predictions, col = "red")
library(MASS)
names(iris)
dim(iris)
head(isis)
str(iris)
set.seed(555)
train <- sample(1:nrow(iris), nrow(iris)/ 2)
iris_Train <- iris[Train,]
iris_Test <- iris[-Train, ]
fit1 <- lda(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris_Train)
predict1 <- predict(fit1, iris_Train)
set.seed(555)
Train <- sample(1:nrow(iris), nrow(iris)/ 2)
iris_Train <- iris[Train,]
iris_Test <- iris[-Train, ]
fit1 <- lda(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris_Train)
predict1 <- predict(fit1, iris_Train)
predict1_class <- predict1$class
table <- table(predict1_class, iris_Train$Species)
table
sum(diag(table1))/sum(table1)
sum(diag(table))/sum(table1)
sum(diag(table))/sum(table1)
sum(diag(table))/sum(table)
# We will always use the data closest in date for both datasets "7/20/2022" and finding the percentages
# Race_Status
total_fulvac<- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "07/20/2022" &
vaccine.df$Type == "Percentage",]
setwd("C:/Users/ghpan/Documents/DataAnalytics2023_Tony_Min/Assignments/Assignment 6 (Project)")
vaccine.df <- read.csv("COVID-19_Vaccination_by_Town_and_Race_Ethnicity_-_ARCHIVED.csv")
colnames(vaccine.df) <- c("TownName", "VaccinationStatus", "Race", "Type", "Value", "Date")
summary(vaccine.df)
length(unique(vaccine.df$TownName))
unique(vaccine.df$VaccinationStatus)
unique(vaccine.df$Race)
unique(vaccine.df$Type)
length(unique(vaccine.df$Value))
unique(vaccine.df$Date)
length(unique(vaccine.df$Date))
# We will always use the data closest in date for both datasets "7/20/2022" and finding the percentages
# Race_Status
total_fulvac<- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "Total" &
vaccine.df$Date == "07/20/2022" &
vaccine.df$Type == "Percentage",]
summary(total_fulvac)
total_fulvac <- subset(total_fulvac, select = -c(Race, VaccinationStatus, Date, Type))
total_fulvac
attendance <- read.csv("School_Attendance_by_Student_Group_and_District__2021-2022.csv")
colnames(attendance) <- c("Code", "DistrictName", "Category", "StudentGroup",
"21-22count", "21-22rate", "20-21count", "20-21rate",
"19-20count", "19-20rate", "ReportPeriod", "Date")
summary(attendance)
length(unique(attendance$Code))
unique(attendance$DistrictName)
unique(attendance$Category)
unique(attendance$StudentGroup)
unique(vaccine.df$Race)
# We will always use the data closest in date for both datasets "7/20/2022" and finding the percentages
# Race_Status
total_fulvac<- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Race == "NH White" &
vaccine.df$Date == "07/20/2022" &
vaccine.df$Type == "Percentage",]
summary(total_fulvac)
total_fulvac <- subset(total_fulvac, select = -c(Race, VaccinationStatus, Date, Type))
total_fulvac
total_fulvac
total_fulvac
attendance <- read.csv("School_Attendance_by_Student_Group_and_District__2021-2022.csv")
colnames(attendance) <- c("Code", "DistrictName", "Category", "StudentGroup",
"21-22count", "21-22rate", "20-21count", "20-21rate",
"19-20count", "19-20rate", "ReportPeriod", "Date")
length(unique(attendance$Code))
unique(attendance$DistrictName)
unique(attendance$Category)
unique(attendance$StudentGroup)
# We will always use the data closest in date for both datasets "7/20/2022" and finding the percentages
total_fulvac<- vaccine.df[vaccine.df$VaccinationStatus == "Fully vaccinated" &
vaccine.df$Date == "07/20/2022" &
vaccine.df$Type == "Percentage",]
summary(total_fulvac)
total_fulvac <- subset(total_fulvac, select = -c(Race, VaccinationStatus, Date, Type))
total_fulvac
attendance.df <- read.csv("School_Attendance_by_Student_Group_and_District__2021-2022.csv")
colnames(attendance.df) <- c("Code", "DistrictName", "Category", "StudentGroup",
"21-22count", "21-22rate", "20-21count", "20-21rate",
"19-20count", "19-20rate", "ReportPeriod", "Date")
summary(attendance.df)
length(unique(attendance.df$Code))
unique(attendance.df$DistrictName)
unique(attendance.df$Category)
unique(attendance.df$StudentGroup)
att <- attendance.df[attendance.df$StudentGroup == 'White']
att <- attendance.df[attendance.df$Category == 'Race/Ethnicity']
colnames(attendance.df) <- c("Code", "DistrictName", "Category", "StudentGroup",
"21-22count", "21-22rate", "20-21count", "20-21rate",
"19-20count", "19-20rate", "ReportPeriod", "Date")
attendance.df$Category
att <- attendance.df[attendance.df$Category == 'Race/Ethnicity']
att <- attendance.df[attendance.df$Category == 'Race/Ethnicity',]
att
att <- subset(att, select = -c("Code", "Category", "Date"))
att
att <- subset(att, select = -c("Code", "Category", "Date"))
att <- subset(att, select = -c(Code, Category, Date))
att
att <- subset(att, select = -c(Code, Category, Date, ReportPeriod))
att <- attendance.df[attendance.df$Category == 'Race/Ethnicity',]
att <- subset(att, select = -c(Code, Category, Date, ReportPeriod))
att
vaccine.df <- read.csv("COVID-19_Vaccination_by_Town_and_Race_Ethnicity_-_ARCHIVED.csv")
colnames(vaccine.df) <- c("TownName", "VaccinationStatus", "Race", "Type", "Value", "Date")
summary(vaccine.df)
vaccine.df <- vaccine.df[vaccine.df$VaccinationStatus == 'Fully vaccinated' &
vaccine.df$Date == '07/20/2022' &
vaccine.df$Type == 'Percentage', ]
vaccine.df.head()
vaccine.df.head
View(vaccine.df)
Dim(vaccine.df)
dim(vaccine.df)
dim(vaccine.df)
vaccine.df <- na.omit(vaccine.df)
dim(vaccine.df)
# Cleaning the Attendance Dataset
attendance.df <- read.csv("School_Attendance_by_Student_Group_and_District__2021-2022.csv")
colnames(attendance.df) <- c("Code", "DistrictName", "Category", "StudentGroup",
"21-22count", "21-22rate", "20-21count", "20-21rate",
"19-20count", "19-20rate", "ReportPeriod", "Date")
summary(attendance.df)
# Understanding all variables
length(unique(attendance.df$Code))
unique(attendance.df$DistrictName)
unique(attendance.df$Category)
unique(attendance.df$StudentGroup)
attendance.df <- subset(attendance.df, grepl("School District$", DistrictName))
summary(attendance.df)
attendance.df <- subset(attendance.df, grepl("School District$", DistrictName))
unique(attendance.df$DistrictName)
summary(attendance.df)
# Understanding all variables
length(unique(attendance.df$Code))
unique(attendance.df$DistrictName)
# Cleaning the Dataset
attendance.df <- subset(attendance.df, grepl("School District$", DistrictName))
# Understanding all variables
length(unique(attendance.df$Code))
unique(attendance.df$DistrictName)
unique(attendance.df$Category)
unique(attendance.df$StudentGroup)
attendance.df <- attendance.df[attendance.df$Category == 'Race/Ethnicity', ]
unique(attendance.df$StudentGroup)
# Cleaning the Vaccine
vaccine.df <- read.csv("COVID-19_Vaccination_by_Town_and_Race_Ethnicity_-_ARCHIVED.csv")
colnames(vaccine.df) <- c("TownName", "VaccinationStatus", "Race", "Type", "Value", "Date")
summary(vaccine.df)
# Understanding Variables
length(unique(vaccine.df$TownName))
unique(vaccine.df$VaccinationStatus)
unique(vaccine.df$Race)
unique(vaccine.df$Type)
length(unique(vaccine.df$Value))
unique(vaccine.df$Date)
length(unique(vaccine.df$Date))
# Clean the vaccine dataset into the data we choose to use
vaccine.df <- vaccine.df[vaccine.df$VaccinationStatus == 'Fully vaccinated' &
vaccine.df$Date == '07/20/2022' &
vaccine.df$Type == 'Percentage', ]
dim(vaccine.df)
# remove null values
vaccine.df <- na.omit(vaccine.df)
dim(vaccine.df)
# Cleaning the Attendance Dataset
attendance.df <- read.csv("School_Attendance_by_Student_Group_and_District__2021-2022.csv")
colnames(attendance.df) <- c("Code", "DistrictName", "Category", "StudentGroup",
"21-22count", "21-22rate", "20-21count", "20-21rate",
"19-20count", "19-20rate", "ReportPeriod", "Date")
summary(attendance.df)
# Understanding all variables
length(unique(attendance.df$Code))
unique(attendance.df$DistrictName)
unique(attendance.df$Category)
unique(attendance.df$StudentGroup)
# Cleaning the Dataset
attendance.df <- subset(attendance.df, grepl("School District$", DistrictName))
attendance.df <- attendance.df[attendance.df$Category == 'Race/Ethnicity', ]
dim(attendance.df)
attendance.df <- na.omit(attendance.df)
dim(attendance.df)
# Change School districts into just districts
attendance.df$DistrictName <- sub(" School District$", "", attendance.df$DistrictName)
unique(attendance.df$DistrictName)
# Combine the datasets
df <- merge(vaccine.df, attendance.df, by = "District")
# Combine the datasets
df <- merge(vaccine.df, attendance.df)
View(df)
summary(vaccine.df)
# Combine the datasets
df <- merge(vaccine.df, attendance.df, by.x = "TownName", by.y = "DistrictName", all = TRUE)
View(df)
# Now with merged datasets lets remove unnecessary features
df <- subset(df, select = -c(Date.x))
View(df)
# Now with merged datasets lets remove unnecessary features
df <- subset(df, select = -c(Date.x, Code, 21-22count))
View(df)
# Now with merged datasets lets remove unnecessary features
df <- subset(df, select = -c(Date.x, Code, ReportPeriod, Date.y))
# Combine the datasets
df <- merge(vaccine.df, attendance.df, by.x = "TownName", by.y = "DistrictName", all = TRUE)
# Now with merged datasets lets remove unnecessary features
df <- subset(df, select = -c(Date.x, Code, 21-22count))
# Combine the datasets
df <- merge(vaccine.df, attendance.df, by.x = "TownName", by.y = "DistrictName", all = TRUE)
# Now with merged datasets lets remove unnecessary features
df <- subset(df, select = -c(Date.x, Code, ReportPeriod, Date.y))
View(df)
head(df)
white_df <- subset(df, Race == "NH White" & StudentGroup == "White")
head(white_df)
View(white_df)
black_df <- subset(df, Race == "NH Black" & StudentGroup == 'Black')
View(black_df)
black_df <- subset(df, Race == "NH Black" & StudentGroup == 'Black or African American')
View(black_df)
hispanic_df <- subset(df, Race = "Hispanic" & StudentGroup == 'Hispanic/Latino of any race')
all_df <- subset(df, Race = "Race" & StudentGroup == 'All other races')
all_df <- subset(df, Race = "Total" & StudentGroup == 'All other races')
all_df <- subset(df, Race = "Total" & StudentGroup == 'All other races')
# Combine the datasets
df <- merge(vaccine.df, attendance.df, by.x = "TownName", by.y = "DistrictName", all = TRUE)
# Now with merged datasets lets remove unnecessary features
df <- subset(df, select = -c(Date.x, Code, ReportPeriod, Date.y))
white_df <- subset(df, Race == "NH White" & StudentGroup == "White")
black_df <- subset(df, Race == "NH Black" & StudentGroup == 'Black or African American')
hispanic_df <- subset(df, Race = "Hispanic" & StudentGroup == 'Hispanic/Latino of any race')
all_df <- subset(df, Race == "Total" & StudentGroup == 'All other races')
# Double check for null values
white_df <- na.omit(white_df)
black_df <- na.omit(black_df)
hispanic_df <- na.omit(hispanic_df)
all_df <- na.omit(all_df)
# Now remove unnecessary features from these seperated dataframes
colnames(white_df)
white_df <- subset(white_df, select = -c(VaccinationStatus, Race, Type, Category, StudentGroup,
"21-22count", "20-21count", "19-20count"))
white_df <- subset(white_df, select = -c(VaccinationStatus, Race, Type, Category, StudentGroup,
21-22count, 20-21count, 19-20count))
white_df <- subset(white_df, select = -c(VaccinationStatus, Race, Type, Category, StudentGroup,
`21-22count`, `20-21count`, `19-20count`))
white_df
black_df <- subset(black_df, select = -c(VaccinationStatus, Race, Type, Category, StudentGroup,
`21-22count`, `20-21count`, `19-20count`))
hispanic_df <- subset(hispanic_df, select = -c(VaccinationStatus, Race, Type, Category, StudentGroup,
`21-22count`, `20-21count`, `19-20count`))
all_df <- subset(all_df, select = -c(VaccinationStatus, Race, Type, Category, StudentGroup,
`21-22count`, `20-21count`, `19-20count`))
all_df
# Now multiple rates to be out of 100 percent
white_df$`21-22rate` <- white_df$`21-22rate` * 100
white_df
# Now multiple rates to be out of 100 percent
white_df$`21-22rate` <- round(white_df$`21-22rate` * 100, 1)
white_df
white_df <- subset(df, Race == "NH White" & StudentGroup == "White")
black_df <- subset(df, Race == "NH Black" & StudentGroup == 'Black or African American')
hispanic_df <- subset(df, Race = "Hispanic" & StudentGroup == 'Hispanic/Latino of any race')
all_df <- subset(df, Race == "Total" & StudentGroup == 'All other races')
# Double check for null values
white_df <- na.omit(white_df)
black_df <- na.omit(black_df)
hispanic_df <- na.omit(hispanic_df)
all_df <- na.omit(all_df)
# Now remove unnecessary features from these separated data frames
white_df <- subset(white_df, select = -c(VaccinationStatus, Race, Type, Category, StudentGroup,
`21-22count`, `20-21count`, `19-20count`))
black_df <- subset(black_df, select = -c(VaccinationStatus, Race, Type, Category, StudentGroup,
`21-22count`, `20-21count`, `19-20count`))
hispanic_df <- subset(hispanic_df, select = -c(VaccinationStatus, Race, Type, Category, StudentGroup,
`21-22count`, `20-21count`, `19-20count`))
all_df <- subset(all_df, select = -c(VaccinationStatus, Race, Type, Category, StudentGroup,
`21-22count`, `20-21count`, `19-20count`))
# Now multiple rates to be out of 100 percent
white_df$`21-22rate` <- round(white_df$`21-22rate` * 100, 1)
white_df
library(dplyr)
