num_vec = c(1, 2, 3, 5, 99)
class(num_vec)
num_vec = c(1, 3, 5,99)
class(num_vec)
install.pakages("MASSS")
library(MASS)
install.packages("MASSS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
attach(Boston)
?Boston
head(Boston)
head(Boston)
dim(Boston)
names(Boston)
str(Boston)
nrow(Boston)
ncol(Boston)
summary(Boston)
statistics
summary(Boston$crim)
library(ISLR)
library(MASS)
library(boot)
set.seed(1)
install.packages(ISLR)
install.packages("ISLR")
library(ISLR)
library(MASS)
library(boot)
set.seed(1)
??cv.glm
help("sample")
train = sample(392, 196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
attach(Auto)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
lm.fit2 <- lm(mpg~poly(horsepower, 2), data = Auto, subset = train)
mean((mpg-predict(lm.fit2, Auto))[-train]^2)
mean((mpg-predict(lm.fit3, Auto))[-train]^2)
# Cubic Regression Line
lm.fit3 <- lm(mpg~poly(horsepower, 3), data = Auto, subset = train)
mean((mpg-predict(lm.fit3, Auto))[-train]^2)
library(ISLR)
library(MASS)
library(boot)
set.seed(1)
train = sample(392, 196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
attach(Auto)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
# Quadratic Regression Line
lm.fit2 <- lm(mpg~poly(horsepower, 2), data = Auto, subset = train)
mean((mpg-predict(lm.fit2, Auto))[-train]^2)
# Cubic Regression Line
lm.fit3 <- lm(mpg~poly(horsepower, 3), data = Auto, subset = train)
mean((mpg-predict(lm.fit3, Auto))[-train]^2)
set.seed(2)
set.seed(2)
train = sample(392,196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train) # Quadratic
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
set.seed(2)
train = sample(392,196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train) # Quadratic
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train) # Cubic
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
set.seed(17)
cv.error.10 = rep(0,10)
for(i in 1:10){
glm.fit = glm(mpg ~ poly(horsepower, i), data = Auto)
cv.error.10[i] = cv.glm(Auto,glm.fit, K=10) $delta[1]
}
cv.error.10
library(ISLR)
library(MASS)
library(boot)
set.seed(17)
help('rep')
cv.error.10 = rep(0,10)
for(i in 1:10){
glm.fit = glm(mpg ~ poly(horsepower, i), data = Auto)
cv.error.10[i] = cv.glm(Auto,glm.fit, K=10) $delta[1]
}
cv.error.10
install.packages("randomForest")
setwd("C:/Users/ghpan/Documents/DataAnalytics2023_Tony_Min/Labs/lab7")
setwd("C:/Users/ghpan/Documents/DataAnalytics2023_Tony_Min/Labs/lab7")
install.packages("randomForest")
library(randomForest)
data1 <- read.csv(file.choose(), header = TRUE)
View(data1)
head(data1)
str(data1)
colnames <- c("BuyingPrice", "Maintenance", "NumDoors", "NumPersons", "BootSpace", "Safety", "Condition")
head(data1)
str(data1)
colnames(data1)<- c("BuyingPrice", "Maintenance", "NumDoors", "NumPersons", "BootSpace", "Safety", "Condition")
head(data1)
str(data1)
levels(data1$Condition)
str(data1)
head(data1)
str(data1)
levels(data1$Condition)
summary(data1)
set.seed(100)
train <- sample(nrow(data1), 0.7 * nrow(data1), replace = FALSE)
TrainSet <- data1[train, ]
TestSet <- data1[-train, ]
summary(TrainSet)
summary(TestSet)
help(randomForest)
model1 <- randomForest(Condition ~ ., data = TrainSet, importance = TRUE)
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
data1 <- read.csv(file.choose(), header = TRUE)
View(data1)
colnames(data1)<- c("BuyingPrice", "Maintenance", "NumDoors", "NumPersons",
"BootSpace", "Safety", "Condition")
head(data1)
str(data1)
levels(data1$Condition)
summary(data1)
set.seed(100)
train <- sample(nrow(data1), 0.7 * nrow(data1), replace = FALSE)
TrainSet <- data1[train, ]
TestSet <- data1[-train, ]
summary(TrainSet)
summary(TestSet)
help(randomForest)
model1 <- randomForest(Condition ~ ., data = TrainSet, importance = TRUE)
")
head(iris)
")
data("iris")
head(iris)
irisdata1 <- iris[,1:4]
irisdata1
principle_components <- princomp(irisdata1, cor = TRUE, score = TRUE)
summary(principle_components)
plot(principle_components)
plot(principle_components, type = 'l')
plot(principle_components, type = 'l')
plot(principle_components)
plot(principle_components, type = 'l')
biplot(principle_components)
